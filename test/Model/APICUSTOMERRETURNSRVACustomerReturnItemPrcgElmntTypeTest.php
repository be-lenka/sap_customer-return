<?php
/**
 * APICUSTOMERRETURNSRVACustomerReturnItemPrcgElmntTypeTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\CustomerReturn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Customer Return (A2X)
 *
 * You can use this service to integrate external applications with customer return processing in SAP S/4HANA Cloud. In every API call, you can make use of the following operations:   - You can retrieve returns orders. Apply any of the filters provided or retrieve all existing data.   - You can create returns orders. Note that you must use “deep insert” requests (a header plus the following entities: header partner, header pricing element, item, item partner, and item pricing element). You cannot create headers without including any related entities.   - For existing returns orders, you can create new items. Note that you must use “deep insert” requests (with the following entities: item partner and item pricing element). You cannot create items without including any related entities.   - For existing returns orders, you can add additional business partners at header and item levels.   - For existing returns orders, you can update the header, header partner, header pricing element, item, item partner, and item pricing element.   - For existing returns orders, you can delete the header, header partner, header pricing element, item, item partner, and item pricing element.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace BeLenka\SAP\CustomerReturn\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * APICUSTOMERRETURNSRVACustomerReturnItemPrcgElmntTypeTest Class Doc Comment
 *
 * @category    Class
 * @description APICUSTOMERRETURNSRVACustomerReturnItemPrcgElmntType
 * @package     BeLenka\SAP\CustomerReturn
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class APICUSTOMERRETURNSRVACustomerReturnItemPrcgElmntTypeTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "APICUSTOMERRETURNSRVACustomerReturnItemPrcgElmntType"
     */
    public function testAPICUSTOMERRETURNSRVACustomerReturnItemPrcgElmntType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "customer_return"
     */
    public function testPropertyCustomerReturn()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "customer_return_item"
     */
    public function testPropertyCustomerReturnItem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_procedure_step"
     */
    public function testPropertyPricingProcedureStep()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_procedure_counter"
     */
    public function testPropertyPricingProcedureCounter()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_type"
     */
    public function testPropertyConditionType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_date_time"
     */
    public function testPropertyPricingDateTime()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_calculation_type"
     */
    public function testPropertyConditionCalculationType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_base_value"
     */
    public function testPropertyConditionBaseValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_rate_value"
     */
    public function testPropertyConditionRateValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_currency"
     */
    public function testPropertyConditionCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_quantity"
     */
    public function testPropertyConditionQuantity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_quantity_unit"
     */
    public function testPropertyConditionQuantityUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_category"
     */
    public function testPropertyConditionCategory()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_is_for_statistics"
     */
    public function testPropertyConditionIsForStatistics()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_scale_type"
     */
    public function testPropertyPricingScaleType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_relevant_for_accrual"
     */
    public function testPropertyIsRelevantForAccrual()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cndn_is_relevant_for_invoice_list"
     */
    public function testPropertyCndnIsRelevantForInvoiceList()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_origin"
     */
    public function testPropertyConditionOrigin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "is_group_condition"
     */
    public function testPropertyIsGroupCondition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_record"
     */
    public function testPropertyConditionRecord()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_sequential_number"
     */
    public function testPropertyConditionSequentialNumber()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tax_code"
     */
    public function testPropertyTaxCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "withholding_tax_code"
     */
    public function testPropertyWithholdingTaxCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cndn_rounding_off_diff_amount"
     */
    public function testPropertyCndnRoundingOffDiffAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_amount"
     */
    public function testPropertyConditionAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "transaction_currency"
     */
    public function testPropertyTransactionCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_control"
     */
    public function testPropertyConditionControl()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_inactive_reason"
     */
    public function testPropertyConditionInactiveReason()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_class"
     */
    public function testPropertyConditionClass()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "prcg_procedure_counter_for_header"
     */
    public function testPropertyPrcgProcedureCounterForHeader()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "factor_for_condition_basis_value"
     */
    public function testPropertyFactorForConditionBasisValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "structure_condition"
     */
    public function testPropertyStructureCondition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "period_factor_for_cndn_basis_value"
     */
    public function testPropertyPeriodFactorForCndnBasisValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "pricing_scale_basis"
     */
    public function testPropertyPricingScaleBasis()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_scale_basis_value"
     */
    public function testPropertyConditionScaleBasisValue()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_scale_basis_unit"
     */
    public function testPropertyConditionScaleBasisUnit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_scale_basis_currency"
     */
    public function testPropertyConditionScaleBasisCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "cndn_is_relevant_for_intco_billing"
     */
    public function testPropertyCndnIsRelevantForIntcoBilling()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_is_manually_changed"
     */
    public function testPropertyConditionIsManuallyChanged()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "condition_is_for_configuration"
     */
    public function testPropertyConditionIsForConfiguration()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "variant_condition"
     */
    public function testPropertyVariantCondition()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "to_customer_return"
     */
    public function testPropertyToCustomerReturn()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "to_customer_return_item"
     */
    public function testPropertyToCustomerReturnItem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
