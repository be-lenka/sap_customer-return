<?php
/**
 * APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\CustomerReturn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Customer Return (A2X)
 *
 * You can use this service to integrate external applications with customer return processing in SAP S/4HANA Cloud. In every API call, you can make use of the following operations:   - You can retrieve returns orders. Apply any of the filters provided or retrieve all existing data.   - You can create returns orders. Note that you must use “deep insert” requests (a header plus the following entities: header partner, header pricing element, item, item partner, and item pricing element). You cannot create headers without including any related entities.   - For existing returns orders, you can create new items. Note that you must use “deep insert” requests (with the following entities: item partner and item pricing element). You cannot create items without including any related entities.   - For existing returns orders, you can add additional business partners at header and item levels.   - For existing returns orders, you can update the header, header partner, header pricing element, item, item partner, and item pricing element.   - For existing returns orders, you can delete the header, header partner, header pricing element, item, item partner, and item pricing element.
 *
 * The version of the OpenAPI document: 1.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\CustomerReturn\Model;

use \ArrayAccess;
use \BeLenka\SAP\CustomerReturn\ObjectSerializer;

/**
 * APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\CustomerReturn
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_CUSTOMER_RETURN_SRV.A_CustomerReturnItemType-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'higher_level_item' => 'string',
        'customer_return_item_category' => 'string',
        'customer_return_item_text' => 'string',
        'purchase_order_by_customer' => 'string',
        'material' => 'string',
        'material_by_customer' => 'string',
        'requested_quantity' => 'float',
        'requested_quantity_unit' => 'string',
        'material_group' => 'string',
        'production_plant' => 'string',
        'storage_location' => 'string',
        'shipping_point' => 'string',
        'shipping_type' => 'string',
        'delivery_priority' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'customer_payment_terms' => 'string',
        'product_tax_classification1' => 'string',
        'product_tax_classification2' => 'string',
        'product_tax_classification3' => 'string',
        'product_tax_classification4' => 'string',
        'product_tax_classification5' => 'string',
        'product_tax_classification6' => 'string',
        'product_tax_classification7' => 'string',
        'product_tax_classification8' => 'string',
        'product_tax_classification9' => 'string',
        'sales_document_rjcn_reason' => 'string',
        'item_billing_block_reason' => 'string',
        'profit_center' => 'string',
        'return_reason' => 'string',
        'rets_mgmt_processing_block' => 'string',
        'cust_ret_itm_follow_up_activity' => 'string',
        'returns_material_has_been_received' => 'string',
        'returns_refund_type' => 'string',
        'returns_refund_procg_mode' => 'string',
        'rets_prod_valn_is_suspended' => 'string',
        'returns_refund_extent' => 'string',
        'prelim_refund_is_determined' => 'string',
        'replacement_material' => 'string',
        'replacement_material_quantity' => 'float',
        'replacement_material_qty_unit' => 'string',
        'replacement_material_is_requested' => 'string',
        'replacement_matl_supplying_plant' => 'string',
        'next_plant_for_follow_up_activity' => 'string',
        'returns_transshipment_plant' => 'string',
        'supplier' => 'string',
        'supplier_ret_matl_authzn' => 'string',
        'customer_ret_matl_insp_result_code' => 'string',
        'next_fllw_up_activity_for_matl_insp' => 'string',
        'ret_matl_insp_result_code' => 'string',
        'product_is_inspected_at_cust_site' => 'string',
        'reference_sd_document' => 'string',
        'reference_sd_document_item' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'higher_level_item' => null,
        'customer_return_item_category' => null,
        'customer_return_item_text' => null,
        'purchase_order_by_customer' => null,
        'material' => null,
        'material_by_customer' => null,
        'requested_quantity' => 'decimal',
        'requested_quantity_unit' => null,
        'material_group' => null,
        'production_plant' => null,
        'storage_location' => null,
        'shipping_point' => null,
        'shipping_type' => null,
        'delivery_priority' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'customer_payment_terms' => null,
        'product_tax_classification1' => null,
        'product_tax_classification2' => null,
        'product_tax_classification3' => null,
        'product_tax_classification4' => null,
        'product_tax_classification5' => null,
        'product_tax_classification6' => null,
        'product_tax_classification7' => null,
        'product_tax_classification8' => null,
        'product_tax_classification9' => null,
        'sales_document_rjcn_reason' => null,
        'item_billing_block_reason' => null,
        'profit_center' => null,
        'return_reason' => null,
        'rets_mgmt_processing_block' => null,
        'cust_ret_itm_follow_up_activity' => null,
        'returns_material_has_been_received' => null,
        'returns_refund_type' => null,
        'returns_refund_procg_mode' => null,
        'rets_prod_valn_is_suspended' => null,
        'returns_refund_extent' => null,
        'prelim_refund_is_determined' => null,
        'replacement_material' => null,
        'replacement_material_quantity' => 'decimal',
        'replacement_material_qty_unit' => null,
        'replacement_material_is_requested' => null,
        'replacement_matl_supplying_plant' => null,
        'next_plant_for_follow_up_activity' => null,
        'returns_transshipment_plant' => null,
        'supplier' => null,
        'supplier_ret_matl_authzn' => null,
        'customer_ret_matl_insp_result_code' => null,
        'next_fllw_up_activity_for_matl_insp' => null,
        'ret_matl_insp_result_code' => null,
        'product_is_inspected_at_cust_site' => null,
        'reference_sd_document' => null,
        'reference_sd_document_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'higher_level_item' => true,
		'customer_return_item_category' => true,
		'customer_return_item_text' => true,
		'purchase_order_by_customer' => true,
		'material' => true,
		'material_by_customer' => true,
		'requested_quantity' => true,
		'requested_quantity_unit' => true,
		'material_group' => true,
		'production_plant' => true,
		'storage_location' => true,
		'shipping_point' => true,
		'shipping_type' => true,
		'delivery_priority' => true,
		'incoterms_classification' => true,
		'incoterms_transfer_location' => true,
		'incoterms_location1' => true,
		'incoterms_location2' => true,
		'customer_payment_terms' => true,
		'product_tax_classification1' => true,
		'product_tax_classification2' => true,
		'product_tax_classification3' => true,
		'product_tax_classification4' => true,
		'product_tax_classification5' => true,
		'product_tax_classification6' => true,
		'product_tax_classification7' => true,
		'product_tax_classification8' => true,
		'product_tax_classification9' => true,
		'sales_document_rjcn_reason' => true,
		'item_billing_block_reason' => true,
		'profit_center' => true,
		'return_reason' => true,
		'rets_mgmt_processing_block' => true,
		'cust_ret_itm_follow_up_activity' => true,
		'returns_material_has_been_received' => true,
		'returns_refund_type' => true,
		'returns_refund_procg_mode' => true,
		'rets_prod_valn_is_suspended' => true,
		'returns_refund_extent' => true,
		'prelim_refund_is_determined' => true,
		'replacement_material' => true,
		'replacement_material_quantity' => true,
		'replacement_material_qty_unit' => true,
		'replacement_material_is_requested' => true,
		'replacement_matl_supplying_plant' => true,
		'next_plant_for_follow_up_activity' => true,
		'returns_transshipment_plant' => true,
		'supplier' => true,
		'supplier_ret_matl_authzn' => true,
		'customer_ret_matl_insp_result_code' => true,
		'next_fllw_up_activity_for_matl_insp' => true,
		'ret_matl_insp_result_code' => true,
		'product_is_inspected_at_cust_site' => true,
		'reference_sd_document' => true,
		'reference_sd_document_item' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'higher_level_item' => 'HigherLevelItem',
        'customer_return_item_category' => 'CustomerReturnItemCategory',
        'customer_return_item_text' => 'CustomerReturnItemText',
        'purchase_order_by_customer' => 'PurchaseOrderByCustomer',
        'material' => 'Material',
        'material_by_customer' => 'MaterialByCustomer',
        'requested_quantity' => 'RequestedQuantity',
        'requested_quantity_unit' => 'RequestedQuantityUnit',
        'material_group' => 'MaterialGroup',
        'production_plant' => 'ProductionPlant',
        'storage_location' => 'StorageLocation',
        'shipping_point' => 'ShippingPoint',
        'shipping_type' => 'ShippingType',
        'delivery_priority' => 'DeliveryPriority',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'customer_payment_terms' => 'CustomerPaymentTerms',
        'product_tax_classification1' => 'ProductTaxClassification1',
        'product_tax_classification2' => 'ProductTaxClassification2',
        'product_tax_classification3' => 'ProductTaxClassification3',
        'product_tax_classification4' => 'ProductTaxClassification4',
        'product_tax_classification5' => 'ProductTaxClassification5',
        'product_tax_classification6' => 'ProductTaxClassification6',
        'product_tax_classification7' => 'ProductTaxClassification7',
        'product_tax_classification8' => 'ProductTaxClassification8',
        'product_tax_classification9' => 'ProductTaxClassification9',
        'sales_document_rjcn_reason' => 'SalesDocumentRjcnReason',
        'item_billing_block_reason' => 'ItemBillingBlockReason',
        'profit_center' => 'ProfitCenter',
        'return_reason' => 'ReturnReason',
        'rets_mgmt_processing_block' => 'RetsMgmtProcessingBlock',
        'cust_ret_itm_follow_up_activity' => 'CustRetItmFollowUpActivity',
        'returns_material_has_been_received' => 'ReturnsMaterialHasBeenReceived',
        'returns_refund_type' => 'ReturnsRefundType',
        'returns_refund_procg_mode' => 'ReturnsRefundProcgMode',
        'rets_prod_valn_is_suspended' => 'RetsProdValnIsSuspended',
        'returns_refund_extent' => 'ReturnsRefundExtent',
        'prelim_refund_is_determined' => 'PrelimRefundIsDetermined',
        'replacement_material' => 'ReplacementMaterial',
        'replacement_material_quantity' => 'ReplacementMaterialQuantity',
        'replacement_material_qty_unit' => 'ReplacementMaterialQtyUnit',
        'replacement_material_is_requested' => 'ReplacementMaterialIsRequested',
        'replacement_matl_supplying_plant' => 'ReplacementMatlSupplyingPlant',
        'next_plant_for_follow_up_activity' => 'NextPlantForFollowUpActivity',
        'returns_transshipment_plant' => 'ReturnsTransshipmentPlant',
        'supplier' => 'Supplier',
        'supplier_ret_matl_authzn' => 'SupplierRetMatlAuthzn',
        'customer_ret_matl_insp_result_code' => 'CustomerRetMatlInspResultCode',
        'next_fllw_up_activity_for_matl_insp' => 'NextFllwUpActivityForMatlInsp',
        'ret_matl_insp_result_code' => 'RetMatlInspResultCode',
        'product_is_inspected_at_cust_site' => 'ProductIsInspectedAtCustSite',
        'reference_sd_document' => 'ReferenceSDDocument',
        'reference_sd_document_item' => 'ReferenceSDDocumentItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'higher_level_item' => 'setHigherLevelItem',
        'customer_return_item_category' => 'setCustomerReturnItemCategory',
        'customer_return_item_text' => 'setCustomerReturnItemText',
        'purchase_order_by_customer' => 'setPurchaseOrderByCustomer',
        'material' => 'setMaterial',
        'material_by_customer' => 'setMaterialByCustomer',
        'requested_quantity' => 'setRequestedQuantity',
        'requested_quantity_unit' => 'setRequestedQuantityUnit',
        'material_group' => 'setMaterialGroup',
        'production_plant' => 'setProductionPlant',
        'storage_location' => 'setStorageLocation',
        'shipping_point' => 'setShippingPoint',
        'shipping_type' => 'setShippingType',
        'delivery_priority' => 'setDeliveryPriority',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'customer_payment_terms' => 'setCustomerPaymentTerms',
        'product_tax_classification1' => 'setProductTaxClassification1',
        'product_tax_classification2' => 'setProductTaxClassification2',
        'product_tax_classification3' => 'setProductTaxClassification3',
        'product_tax_classification4' => 'setProductTaxClassification4',
        'product_tax_classification5' => 'setProductTaxClassification5',
        'product_tax_classification6' => 'setProductTaxClassification6',
        'product_tax_classification7' => 'setProductTaxClassification7',
        'product_tax_classification8' => 'setProductTaxClassification8',
        'product_tax_classification9' => 'setProductTaxClassification9',
        'sales_document_rjcn_reason' => 'setSalesDocumentRjcnReason',
        'item_billing_block_reason' => 'setItemBillingBlockReason',
        'profit_center' => 'setProfitCenter',
        'return_reason' => 'setReturnReason',
        'rets_mgmt_processing_block' => 'setRetsMgmtProcessingBlock',
        'cust_ret_itm_follow_up_activity' => 'setCustRetItmFollowUpActivity',
        'returns_material_has_been_received' => 'setReturnsMaterialHasBeenReceived',
        'returns_refund_type' => 'setReturnsRefundType',
        'returns_refund_procg_mode' => 'setReturnsRefundProcgMode',
        'rets_prod_valn_is_suspended' => 'setRetsProdValnIsSuspended',
        'returns_refund_extent' => 'setReturnsRefundExtent',
        'prelim_refund_is_determined' => 'setPrelimRefundIsDetermined',
        'replacement_material' => 'setReplacementMaterial',
        'replacement_material_quantity' => 'setReplacementMaterialQuantity',
        'replacement_material_qty_unit' => 'setReplacementMaterialQtyUnit',
        'replacement_material_is_requested' => 'setReplacementMaterialIsRequested',
        'replacement_matl_supplying_plant' => 'setReplacementMatlSupplyingPlant',
        'next_plant_for_follow_up_activity' => 'setNextPlantForFollowUpActivity',
        'returns_transshipment_plant' => 'setReturnsTransshipmentPlant',
        'supplier' => 'setSupplier',
        'supplier_ret_matl_authzn' => 'setSupplierRetMatlAuthzn',
        'customer_ret_matl_insp_result_code' => 'setCustomerRetMatlInspResultCode',
        'next_fllw_up_activity_for_matl_insp' => 'setNextFllwUpActivityForMatlInsp',
        'ret_matl_insp_result_code' => 'setRetMatlInspResultCode',
        'product_is_inspected_at_cust_site' => 'setProductIsInspectedAtCustSite',
        'reference_sd_document' => 'setReferenceSdDocument',
        'reference_sd_document_item' => 'setReferenceSdDocumentItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'higher_level_item' => 'getHigherLevelItem',
        'customer_return_item_category' => 'getCustomerReturnItemCategory',
        'customer_return_item_text' => 'getCustomerReturnItemText',
        'purchase_order_by_customer' => 'getPurchaseOrderByCustomer',
        'material' => 'getMaterial',
        'material_by_customer' => 'getMaterialByCustomer',
        'requested_quantity' => 'getRequestedQuantity',
        'requested_quantity_unit' => 'getRequestedQuantityUnit',
        'material_group' => 'getMaterialGroup',
        'production_plant' => 'getProductionPlant',
        'storage_location' => 'getStorageLocation',
        'shipping_point' => 'getShippingPoint',
        'shipping_type' => 'getShippingType',
        'delivery_priority' => 'getDeliveryPriority',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'customer_payment_terms' => 'getCustomerPaymentTerms',
        'product_tax_classification1' => 'getProductTaxClassification1',
        'product_tax_classification2' => 'getProductTaxClassification2',
        'product_tax_classification3' => 'getProductTaxClassification3',
        'product_tax_classification4' => 'getProductTaxClassification4',
        'product_tax_classification5' => 'getProductTaxClassification5',
        'product_tax_classification6' => 'getProductTaxClassification6',
        'product_tax_classification7' => 'getProductTaxClassification7',
        'product_tax_classification8' => 'getProductTaxClassification8',
        'product_tax_classification9' => 'getProductTaxClassification9',
        'sales_document_rjcn_reason' => 'getSalesDocumentRjcnReason',
        'item_billing_block_reason' => 'getItemBillingBlockReason',
        'profit_center' => 'getProfitCenter',
        'return_reason' => 'getReturnReason',
        'rets_mgmt_processing_block' => 'getRetsMgmtProcessingBlock',
        'cust_ret_itm_follow_up_activity' => 'getCustRetItmFollowUpActivity',
        'returns_material_has_been_received' => 'getReturnsMaterialHasBeenReceived',
        'returns_refund_type' => 'getReturnsRefundType',
        'returns_refund_procg_mode' => 'getReturnsRefundProcgMode',
        'rets_prod_valn_is_suspended' => 'getRetsProdValnIsSuspended',
        'returns_refund_extent' => 'getReturnsRefundExtent',
        'prelim_refund_is_determined' => 'getPrelimRefundIsDetermined',
        'replacement_material' => 'getReplacementMaterial',
        'replacement_material_quantity' => 'getReplacementMaterialQuantity',
        'replacement_material_qty_unit' => 'getReplacementMaterialQtyUnit',
        'replacement_material_is_requested' => 'getReplacementMaterialIsRequested',
        'replacement_matl_supplying_plant' => 'getReplacementMatlSupplyingPlant',
        'next_plant_for_follow_up_activity' => 'getNextPlantForFollowUpActivity',
        'returns_transshipment_plant' => 'getReturnsTransshipmentPlant',
        'supplier' => 'getSupplier',
        'supplier_ret_matl_authzn' => 'getSupplierRetMatlAuthzn',
        'customer_ret_matl_insp_result_code' => 'getCustomerRetMatlInspResultCode',
        'next_fllw_up_activity_for_matl_insp' => 'getNextFllwUpActivityForMatlInsp',
        'ret_matl_insp_result_code' => 'getRetMatlInspResultCode',
        'product_is_inspected_at_cust_site' => 'getProductIsInspectedAtCustSite',
        'reference_sd_document' => 'getReferenceSdDocument',
        'reference_sd_document_item' => 'getReferenceSdDocumentItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('higher_level_item', $data ?? [], null);
        $this->setIfExists('customer_return_item_category', $data ?? [], null);
        $this->setIfExists('customer_return_item_text', $data ?? [], null);
        $this->setIfExists('purchase_order_by_customer', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('material_by_customer', $data ?? [], null);
        $this->setIfExists('requested_quantity', $data ?? [], null);
        $this->setIfExists('requested_quantity_unit', $data ?? [], null);
        $this->setIfExists('material_group', $data ?? [], null);
        $this->setIfExists('production_plant', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('shipping_point', $data ?? [], null);
        $this->setIfExists('shipping_type', $data ?? [], null);
        $this->setIfExists('delivery_priority', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('customer_payment_terms', $data ?? [], null);
        $this->setIfExists('product_tax_classification1', $data ?? [], null);
        $this->setIfExists('product_tax_classification2', $data ?? [], null);
        $this->setIfExists('product_tax_classification3', $data ?? [], null);
        $this->setIfExists('product_tax_classification4', $data ?? [], null);
        $this->setIfExists('product_tax_classification5', $data ?? [], null);
        $this->setIfExists('product_tax_classification6', $data ?? [], null);
        $this->setIfExists('product_tax_classification7', $data ?? [], null);
        $this->setIfExists('product_tax_classification8', $data ?? [], null);
        $this->setIfExists('product_tax_classification9', $data ?? [], null);
        $this->setIfExists('sales_document_rjcn_reason', $data ?? [], null);
        $this->setIfExists('item_billing_block_reason', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('return_reason', $data ?? [], null);
        $this->setIfExists('rets_mgmt_processing_block', $data ?? [], null);
        $this->setIfExists('cust_ret_itm_follow_up_activity', $data ?? [], null);
        $this->setIfExists('returns_material_has_been_received', $data ?? [], null);
        $this->setIfExists('returns_refund_type', $data ?? [], null);
        $this->setIfExists('returns_refund_procg_mode', $data ?? [], null);
        $this->setIfExists('rets_prod_valn_is_suspended', $data ?? [], null);
        $this->setIfExists('returns_refund_extent', $data ?? [], null);
        $this->setIfExists('prelim_refund_is_determined', $data ?? [], null);
        $this->setIfExists('replacement_material', $data ?? [], null);
        $this->setIfExists('replacement_material_quantity', $data ?? [], null);
        $this->setIfExists('replacement_material_qty_unit', $data ?? [], null);
        $this->setIfExists('replacement_material_is_requested', $data ?? [], null);
        $this->setIfExists('replacement_matl_supplying_plant', $data ?? [], null);
        $this->setIfExists('next_plant_for_follow_up_activity', $data ?? [], null);
        $this->setIfExists('returns_transshipment_plant', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('supplier_ret_matl_authzn', $data ?? [], null);
        $this->setIfExists('customer_ret_matl_insp_result_code', $data ?? [], null);
        $this->setIfExists('next_fllw_up_activity_for_matl_insp', $data ?? [], null);
        $this->setIfExists('ret_matl_insp_result_code', $data ?? [], null);
        $this->setIfExists('product_is_inspected_at_cust_site', $data ?? [], null);
        $this->setIfExists('reference_sd_document', $data ?? [], null);
        $this->setIfExists('reference_sd_document_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['higher_level_item']) && (mb_strlen($this->container['higher_level_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'higher_level_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['customer_return_item_category']) && (mb_strlen($this->container['customer_return_item_category']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_return_item_category', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['customer_return_item_text']) && (mb_strlen($this->container['customer_return_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'customer_return_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['purchase_order_by_customer']) && (mb_strlen($this->container['purchase_order_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'purchase_order_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 40)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['material_by_customer']) && (mb_strlen($this->container['material_by_customer']) > 35)) {
            $invalidProperties[] = "invalid value for 'material_by_customer', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['requested_quantity_unit']) && (mb_strlen($this->container['requested_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'requested_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['material_group']) && (mb_strlen($this->container['material_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'material_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['production_plant']) && (mb_strlen($this->container['production_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'production_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_point']) && (mb_strlen($this->container['shipping_point']) > 4)) {
            $invalidProperties[] = "invalid value for 'shipping_point', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_type']) && (mb_strlen($this->container['shipping_type']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_type', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['delivery_priority']) && (mb_strlen($this->container['delivery_priority']) > 2)) {
            $invalidProperties[] = "invalid value for 'delivery_priority', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['customer_payment_terms']) && (mb_strlen($this->container['customer_payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['product_tax_classification1']) && (mb_strlen($this->container['product_tax_classification1']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification1', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification2']) && (mb_strlen($this->container['product_tax_classification2']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification2', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification3']) && (mb_strlen($this->container['product_tax_classification3']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification3', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification4']) && (mb_strlen($this->container['product_tax_classification4']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification4', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification5']) && (mb_strlen($this->container['product_tax_classification5']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification5', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification6']) && (mb_strlen($this->container['product_tax_classification6']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification6', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification7']) && (mb_strlen($this->container['product_tax_classification7']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification7', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification8']) && (mb_strlen($this->container['product_tax_classification8']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification8', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_tax_classification9']) && (mb_strlen($this->container['product_tax_classification9']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_tax_classification9', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sales_document_rjcn_reason']) && (mb_strlen($this->container['sales_document_rjcn_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'sales_document_rjcn_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['item_billing_block_reason']) && (mb_strlen($this->container['item_billing_block_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'item_billing_block_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['return_reason']) && (mb_strlen($this->container['return_reason']) > 3)) {
            $invalidProperties[] = "invalid value for 'return_reason', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['rets_mgmt_processing_block']) && (mb_strlen($this->container['rets_mgmt_processing_block']) > 1)) {
            $invalidProperties[] = "invalid value for 'rets_mgmt_processing_block', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['cust_ret_itm_follow_up_activity']) && (mb_strlen($this->container['cust_ret_itm_follow_up_activity']) > 4)) {
            $invalidProperties[] = "invalid value for 'cust_ret_itm_follow_up_activity', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['returns_material_has_been_received']) && (mb_strlen($this->container['returns_material_has_been_received']) > 1)) {
            $invalidProperties[] = "invalid value for 'returns_material_has_been_received', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['returns_refund_type']) && (mb_strlen($this->container['returns_refund_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'returns_refund_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['returns_refund_procg_mode']) && (mb_strlen($this->container['returns_refund_procg_mode']) > 1)) {
            $invalidProperties[] = "invalid value for 'returns_refund_procg_mode', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['rets_prod_valn_is_suspended']) && (mb_strlen($this->container['rets_prod_valn_is_suspended']) > 1)) {
            $invalidProperties[] = "invalid value for 'rets_prod_valn_is_suspended', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['returns_refund_extent']) && (mb_strlen($this->container['returns_refund_extent']) > 3)) {
            $invalidProperties[] = "invalid value for 'returns_refund_extent', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['prelim_refund_is_determined']) && (mb_strlen($this->container['prelim_refund_is_determined']) > 1)) {
            $invalidProperties[] = "invalid value for 'prelim_refund_is_determined', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['replacement_material']) && (mb_strlen($this->container['replacement_material']) > 40)) {
            $invalidProperties[] = "invalid value for 'replacement_material', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['replacement_material_qty_unit']) && (mb_strlen($this->container['replacement_material_qty_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'replacement_material_qty_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['replacement_material_is_requested']) && (mb_strlen($this->container['replacement_material_is_requested']) > 1)) {
            $invalidProperties[] = "invalid value for 'replacement_material_is_requested', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['replacement_matl_supplying_plant']) && (mb_strlen($this->container['replacement_matl_supplying_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'replacement_matl_supplying_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['next_plant_for_follow_up_activity']) && (mb_strlen($this->container['next_plant_for_follow_up_activity']) > 4)) {
            $invalidProperties[] = "invalid value for 'next_plant_for_follow_up_activity', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['returns_transshipment_plant']) && (mb_strlen($this->container['returns_transshipment_plant']) > 1)) {
            $invalidProperties[] = "invalid value for 'returns_transshipment_plant', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_ret_matl_authzn']) && (mb_strlen($this->container['supplier_ret_matl_authzn']) > 20)) {
            $invalidProperties[] = "invalid value for 'supplier_ret_matl_authzn', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['customer_ret_matl_insp_result_code']) && (mb_strlen($this->container['customer_ret_matl_insp_result_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'customer_ret_matl_insp_result_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['next_fllw_up_activity_for_matl_insp']) && (mb_strlen($this->container['next_fllw_up_activity_for_matl_insp']) > 4)) {
            $invalidProperties[] = "invalid value for 'next_fllw_up_activity_for_matl_insp', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['ret_matl_insp_result_code']) && (mb_strlen($this->container['ret_matl_insp_result_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'ret_matl_insp_result_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['product_is_inspected_at_cust_site']) && (mb_strlen($this->container['product_is_inspected_at_cust_site']) > 1)) {
            $invalidProperties[] = "invalid value for 'product_is_inspected_at_cust_site', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['reference_sd_document']) && (mb_strlen($this->container['reference_sd_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_sd_document_item']) && (mb_strlen($this->container['reference_sd_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_sd_document_item', the character length must be smaller than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets higher_level_item
     *
     * @return string|null
     */
    public function getHigherLevelItem()
    {
        return $this->container['higher_level_item'];
    }

    /**
     * Sets higher_level_item
     *
     * @param string|null $higher_level_item Higher-Level Item in Bill of Material Structures
     *
     * @return self
     */
    public function setHigherLevelItem($higher_level_item)
    {
        if (is_null($higher_level_item)) {
            array_push($this->openAPINullablesSetToNull, 'higher_level_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('higher_level_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($higher_level_item) && (mb_strlen($higher_level_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $higher_level_item when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['higher_level_item'] = $higher_level_item;

        return $this;
    }

    /**
     * Gets customer_return_item_category
     *
     * @return string|null
     */
    public function getCustomerReturnItemCategory()
    {
        return $this->container['customer_return_item_category'];
    }

    /**
     * Sets customer_return_item_category
     *
     * @param string|null $customer_return_item_category Sales Document Item Category
     *
     * @return self
     */
    public function setCustomerReturnItemCategory($customer_return_item_category)
    {
        if (is_null($customer_return_item_category)) {
            array_push($this->openAPINullablesSetToNull, 'customer_return_item_category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_return_item_category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_return_item_category) && (mb_strlen($customer_return_item_category) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_return_item_category when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['customer_return_item_category'] = $customer_return_item_category;

        return $this;
    }

    /**
     * Gets customer_return_item_text
     *
     * @return string|null
     */
    public function getCustomerReturnItemText()
    {
        return $this->container['customer_return_item_text'];
    }

    /**
     * Sets customer_return_item_text
     *
     * @param string|null $customer_return_item_text Short Text for Sales Order Item
     *
     * @return self
     */
    public function setCustomerReturnItemText($customer_return_item_text)
    {
        if (is_null($customer_return_item_text)) {
            array_push($this->openAPINullablesSetToNull, 'customer_return_item_text');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_return_item_text', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_return_item_text) && (mb_strlen($customer_return_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $customer_return_item_text when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['customer_return_item_text'] = $customer_return_item_text;

        return $this;
    }

    /**
     * Gets purchase_order_by_customer
     *
     * @return string|null
     */
    public function getPurchaseOrderByCustomer()
    {
        return $this->container['purchase_order_by_customer'];
    }

    /**
     * Sets purchase_order_by_customer
     *
     * @param string|null $purchase_order_by_customer purchase_order_by_customer
     *
     * @return self
     */
    public function setPurchaseOrderByCustomer($purchase_order_by_customer)
    {
        if (is_null($purchase_order_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($purchase_order_by_customer) && (mb_strlen($purchase_order_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_by_customer when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['purchase_order_by_customer'] = $purchase_order_by_customer;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            array_push($this->openAPINullablesSetToNull, 'material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material) && (mb_strlen($material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $material when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets material_by_customer
     *
     * @return string|null
     */
    public function getMaterialByCustomer()
    {
        return $this->container['material_by_customer'];
    }

    /**
     * Sets material_by_customer
     *
     * @param string|null $material_by_customer Material Number Used by Customer
     *
     * @return self
     */
    public function setMaterialByCustomer($material_by_customer)
    {
        if (is_null($material_by_customer)) {
            array_push($this->openAPINullablesSetToNull, 'material_by_customer');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_by_customer', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_by_customer) && (mb_strlen($material_by_customer) > 35)) {
            throw new \InvalidArgumentException('invalid length for $material_by_customer when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['material_by_customer'] = $material_by_customer;

        return $this;
    }

    /**
     * Gets requested_quantity
     *
     * @return float|null
     */
    public function getRequestedQuantity()
    {
        return $this->container['requested_quantity'];
    }

    /**
     * Sets requested_quantity
     *
     * @param float|null $requested_quantity requested_quantity
     *
     * @return self
     */
    public function setRequestedQuantity($requested_quantity)
    {
        if (is_null($requested_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['requested_quantity'] = $requested_quantity;

        return $this;
    }

    /**
     * Gets requested_quantity_unit
     *
     * @return string|null
     */
    public function getRequestedQuantityUnit()
    {
        return $this->container['requested_quantity_unit'];
    }

    /**
     * Sets requested_quantity_unit
     *
     * @param string|null $requested_quantity_unit Unit of the Requested Quantity
     *
     * @return self
     */
    public function setRequestedQuantityUnit($requested_quantity_unit)
    {
        if (is_null($requested_quantity_unit)) {
            array_push($this->openAPINullablesSetToNull, 'requested_quantity_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_quantity_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($requested_quantity_unit) && (mb_strlen($requested_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $requested_quantity_unit when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['requested_quantity_unit'] = $requested_quantity_unit;

        return $this;
    }

    /**
     * Gets material_group
     *
     * @return string|null
     */
    public function getMaterialGroup()
    {
        return $this->container['material_group'];
    }

    /**
     * Sets material_group
     *
     * @param string|null $material_group material_group
     *
     * @return self
     */
    public function setMaterialGroup($material_group)
    {
        if (is_null($material_group)) {
            array_push($this->openAPINullablesSetToNull, 'material_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('material_group', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($material_group) && (mb_strlen($material_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $material_group when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 9.');
        }

        $this->container['material_group'] = $material_group;

        return $this;
    }

    /**
     * Gets production_plant
     *
     * @return string|null
     */
    public function getProductionPlant()
    {
        return $this->container['production_plant'];
    }

    /**
     * Sets production_plant
     *
     * @param string|null $production_plant Plant (Own or External)
     *
     * @return self
     */
    public function setProductionPlant($production_plant)
    {
        if (is_null($production_plant)) {
            array_push($this->openAPINullablesSetToNull, 'production_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('production_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($production_plant) && (mb_strlen($production_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $production_plant when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['production_plant'] = $production_plant;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            array_push($this->openAPINullablesSetToNull, 'storage_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('storage_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($storage_location) && (mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets shipping_point
     *
     * @return string|null
     */
    public function getShippingPoint()
    {
        return $this->container['shipping_point'];
    }

    /**
     * Sets shipping_point
     *
     * @param string|null $shipping_point Shipping Point / Receiving Point
     *
     * @return self
     */
    public function setShippingPoint($shipping_point)
    {
        if (is_null($shipping_point)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_point');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_point', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_point) && (mb_strlen($shipping_point) > 4)) {
            throw new \InvalidArgumentException('invalid length for $shipping_point when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['shipping_point'] = $shipping_point;

        return $this;
    }

    /**
     * Gets shipping_type
     *
     * @return string|null
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     *
     * @param string|null $shipping_type shipping_type
     *
     * @return self
     */
    public function setShippingType($shipping_type)
    {
        if (is_null($shipping_type)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($shipping_type) && (mb_strlen($shipping_type) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_type when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets delivery_priority
     *
     * @return string|null
     */
    public function getDeliveryPriority()
    {
        return $this->container['delivery_priority'];
    }

    /**
     * Sets delivery_priority
     *
     * @param string|null $delivery_priority delivery_priority
     *
     * @return self
     */
    public function setDeliveryPriority($delivery_priority)
    {
        if (is_null($delivery_priority)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_priority');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_priority', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($delivery_priority) && (mb_strlen($delivery_priority) > 2)) {
            throw new \InvalidArgumentException('invalid length for $delivery_priority when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['delivery_priority'] = $delivery_priority;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_classification');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_classification', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_classification) && (mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_transfer_location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_transfer_location', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_transfer_location) && (mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location1) && (mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            array_push($this->openAPINullablesSetToNull, 'incoterms_location2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('incoterms_location2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($incoterms_location2) && (mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets customer_payment_terms
     *
     * @return string|null
     */
    public function getCustomerPaymentTerms()
    {
        return $this->container['customer_payment_terms'];
    }

    /**
     * Sets customer_payment_terms
     *
     * @param string|null $customer_payment_terms Key for Terms of Payment
     *
     * @return self
     */
    public function setCustomerPaymentTerms($customer_payment_terms)
    {
        if (is_null($customer_payment_terms)) {
            array_push($this->openAPINullablesSetToNull, 'customer_payment_terms');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_payment_terms', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_payment_terms) && (mb_strlen($customer_payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_payment_terms when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['customer_payment_terms'] = $customer_payment_terms;

        return $this;
    }

    /**
     * Gets product_tax_classification1
     *
     * @return string|null
     */
    public function getProductTaxClassification1()
    {
        return $this->container['product_tax_classification1'];
    }

    /**
     * Sets product_tax_classification1
     *
     * @param string|null $product_tax_classification1 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification1($product_tax_classification1)
    {
        if (is_null($product_tax_classification1)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification1) && (mb_strlen($product_tax_classification1) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification1 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification1'] = $product_tax_classification1;

        return $this;
    }

    /**
     * Gets product_tax_classification2
     *
     * @return string|null
     */
    public function getProductTaxClassification2()
    {
        return $this->container['product_tax_classification2'];
    }

    /**
     * Sets product_tax_classification2
     *
     * @param string|null $product_tax_classification2 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification2($product_tax_classification2)
    {
        if (is_null($product_tax_classification2)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification2) && (mb_strlen($product_tax_classification2) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification2 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification2'] = $product_tax_classification2;

        return $this;
    }

    /**
     * Gets product_tax_classification3
     *
     * @return string|null
     */
    public function getProductTaxClassification3()
    {
        return $this->container['product_tax_classification3'];
    }

    /**
     * Sets product_tax_classification3
     *
     * @param string|null $product_tax_classification3 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification3($product_tax_classification3)
    {
        if (is_null($product_tax_classification3)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification3) && (mb_strlen($product_tax_classification3) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification3 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification3'] = $product_tax_classification3;

        return $this;
    }

    /**
     * Gets product_tax_classification4
     *
     * @return string|null
     */
    public function getProductTaxClassification4()
    {
        return $this->container['product_tax_classification4'];
    }

    /**
     * Sets product_tax_classification4
     *
     * @param string|null $product_tax_classification4 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification4($product_tax_classification4)
    {
        if (is_null($product_tax_classification4)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification4');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification4', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification4) && (mb_strlen($product_tax_classification4) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification4 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification4'] = $product_tax_classification4;

        return $this;
    }

    /**
     * Gets product_tax_classification5
     *
     * @return string|null
     */
    public function getProductTaxClassification5()
    {
        return $this->container['product_tax_classification5'];
    }

    /**
     * Sets product_tax_classification5
     *
     * @param string|null $product_tax_classification5 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification5($product_tax_classification5)
    {
        if (is_null($product_tax_classification5)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification5');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification5', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification5) && (mb_strlen($product_tax_classification5) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification5 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification5'] = $product_tax_classification5;

        return $this;
    }

    /**
     * Gets product_tax_classification6
     *
     * @return string|null
     */
    public function getProductTaxClassification6()
    {
        return $this->container['product_tax_classification6'];
    }

    /**
     * Sets product_tax_classification6
     *
     * @param string|null $product_tax_classification6 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification6($product_tax_classification6)
    {
        if (is_null($product_tax_classification6)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification6');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification6', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification6) && (mb_strlen($product_tax_classification6) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification6 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification6'] = $product_tax_classification6;

        return $this;
    }

    /**
     * Gets product_tax_classification7
     *
     * @return string|null
     */
    public function getProductTaxClassification7()
    {
        return $this->container['product_tax_classification7'];
    }

    /**
     * Sets product_tax_classification7
     *
     * @param string|null $product_tax_classification7 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification7($product_tax_classification7)
    {
        if (is_null($product_tax_classification7)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification7');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification7', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification7) && (mb_strlen($product_tax_classification7) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification7 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification7'] = $product_tax_classification7;

        return $this;
    }

    /**
     * Gets product_tax_classification8
     *
     * @return string|null
     */
    public function getProductTaxClassification8()
    {
        return $this->container['product_tax_classification8'];
    }

    /**
     * Sets product_tax_classification8
     *
     * @param string|null $product_tax_classification8 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification8($product_tax_classification8)
    {
        if (is_null($product_tax_classification8)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification8');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification8', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification8) && (mb_strlen($product_tax_classification8) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification8 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification8'] = $product_tax_classification8;

        return $this;
    }

    /**
     * Gets product_tax_classification9
     *
     * @return string|null
     */
    public function getProductTaxClassification9()
    {
        return $this->container['product_tax_classification9'];
    }

    /**
     * Sets product_tax_classification9
     *
     * @param string|null $product_tax_classification9 Tax Classification for Material
     *
     * @return self
     */
    public function setProductTaxClassification9($product_tax_classification9)
    {
        if (is_null($product_tax_classification9)) {
            array_push($this->openAPINullablesSetToNull, 'product_tax_classification9');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_tax_classification9', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_tax_classification9) && (mb_strlen($product_tax_classification9) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_tax_classification9 when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_tax_classification9'] = $product_tax_classification9;

        return $this;
    }

    /**
     * Gets sales_document_rjcn_reason
     *
     * @return string|null
     */
    public function getSalesDocumentRjcnReason()
    {
        return $this->container['sales_document_rjcn_reason'];
    }

    /**
     * Sets sales_document_rjcn_reason
     *
     * @param string|null $sales_document_rjcn_reason Reason for Rejection of Sales Documents
     *
     * @return self
     */
    public function setSalesDocumentRjcnReason($sales_document_rjcn_reason)
    {
        if (is_null($sales_document_rjcn_reason)) {
            array_push($this->openAPINullablesSetToNull, 'sales_document_rjcn_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sales_document_rjcn_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($sales_document_rjcn_reason) && (mb_strlen($sales_document_rjcn_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $sales_document_rjcn_reason when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['sales_document_rjcn_reason'] = $sales_document_rjcn_reason;

        return $this;
    }

    /**
     * Gets item_billing_block_reason
     *
     * @return string|null
     */
    public function getItemBillingBlockReason()
    {
        return $this->container['item_billing_block_reason'];
    }

    /**
     * Sets item_billing_block_reason
     *
     * @param string|null $item_billing_block_reason Billing Block for Item
     *
     * @return self
     */
    public function setItemBillingBlockReason($item_billing_block_reason)
    {
        if (is_null($item_billing_block_reason)) {
            array_push($this->openAPINullablesSetToNull, 'item_billing_block_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('item_billing_block_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($item_billing_block_reason) && (mb_strlen($item_billing_block_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $item_billing_block_reason when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['item_billing_block_reason'] = $item_billing_block_reason;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            array_push($this->openAPINullablesSetToNull, 'profit_center');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('profit_center', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($profit_center) && (mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets return_reason
     *
     * @return string|null
     */
    public function getReturnReason()
    {
        return $this->container['return_reason'];
    }

    /**
     * Sets return_reason
     *
     * @param string|null $return_reason return_reason
     *
     * @return self
     */
    public function setReturnReason($return_reason)
    {
        if (is_null($return_reason)) {
            array_push($this->openAPINullablesSetToNull, 'return_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('return_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($return_reason) && (mb_strlen($return_reason) > 3)) {
            throw new \InvalidArgumentException('invalid length for $return_reason when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['return_reason'] = $return_reason;

        return $this;
    }

    /**
     * Gets rets_mgmt_processing_block
     *
     * @return string|null
     */
    public function getRetsMgmtProcessingBlock()
    {
        return $this->container['rets_mgmt_processing_block'];
    }

    /**
     * Sets rets_mgmt_processing_block
     *
     * @param string|null $rets_mgmt_processing_block Approval Block
     *
     * @return self
     */
    public function setRetsMgmtProcessingBlock($rets_mgmt_processing_block)
    {
        if (is_null($rets_mgmt_processing_block)) {
            array_push($this->openAPINullablesSetToNull, 'rets_mgmt_processing_block');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rets_mgmt_processing_block', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($rets_mgmt_processing_block) && (mb_strlen($rets_mgmt_processing_block) > 1)) {
            throw new \InvalidArgumentException('invalid length for $rets_mgmt_processing_block when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['rets_mgmt_processing_block'] = $rets_mgmt_processing_block;

        return $this;
    }

    /**
     * Gets cust_ret_itm_follow_up_activity
     *
     * @return string|null
     */
    public function getCustRetItmFollowUpActivity()
    {
        return $this->container['cust_ret_itm_follow_up_activity'];
    }

    /**
     * Sets cust_ret_itm_follow_up_activity
     *
     * @param string|null $cust_ret_itm_follow_up_activity Follow-Up Activity Code
     *
     * @return self
     */
    public function setCustRetItmFollowUpActivity($cust_ret_itm_follow_up_activity)
    {
        if (is_null($cust_ret_itm_follow_up_activity)) {
            array_push($this->openAPINullablesSetToNull, 'cust_ret_itm_follow_up_activity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cust_ret_itm_follow_up_activity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($cust_ret_itm_follow_up_activity) && (mb_strlen($cust_ret_itm_follow_up_activity) > 4)) {
            throw new \InvalidArgumentException('invalid length for $cust_ret_itm_follow_up_activity when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['cust_ret_itm_follow_up_activity'] = $cust_ret_itm_follow_up_activity;

        return $this;
    }

    /**
     * Gets returns_material_has_been_received
     *
     * @return string|null
     */
    public function getReturnsMaterialHasBeenReceived()
    {
        return $this->container['returns_material_has_been_received'];
    }

    /**
     * Sets returns_material_has_been_received
     *
     * @param string|null $returns_material_has_been_received returns_material_has_been_received
     *
     * @return self
     */
    public function setReturnsMaterialHasBeenReceived($returns_material_has_been_received)
    {
        if (is_null($returns_material_has_been_received)) {
            array_push($this->openAPINullablesSetToNull, 'returns_material_has_been_received');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returns_material_has_been_received', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returns_material_has_been_received) && (mb_strlen($returns_material_has_been_received) > 1)) {
            throw new \InvalidArgumentException('invalid length for $returns_material_has_been_received when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['returns_material_has_been_received'] = $returns_material_has_been_received;

        return $this;
    }

    /**
     * Gets returns_refund_type
     *
     * @return string|null
     */
    public function getReturnsRefundType()
    {
        return $this->container['returns_refund_type'];
    }

    /**
     * Sets returns_refund_type
     *
     * @param string|null $returns_refund_type returns_refund_type
     *
     * @return self
     */
    public function setReturnsRefundType($returns_refund_type)
    {
        if (is_null($returns_refund_type)) {
            array_push($this->openAPINullablesSetToNull, 'returns_refund_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returns_refund_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returns_refund_type) && (mb_strlen($returns_refund_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $returns_refund_type when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['returns_refund_type'] = $returns_refund_type;

        return $this;
    }

    /**
     * Gets returns_refund_procg_mode
     *
     * @return string|null
     */
    public function getReturnsRefundProcgMode()
    {
        return $this->container['returns_refund_procg_mode'];
    }

    /**
     * Sets returns_refund_procg_mode
     *
     * @param string|null $returns_refund_procg_mode Refund Processing Mode for a Return
     *
     * @return self
     */
    public function setReturnsRefundProcgMode($returns_refund_procg_mode)
    {
        if (is_null($returns_refund_procg_mode)) {
            array_push($this->openAPINullablesSetToNull, 'returns_refund_procg_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returns_refund_procg_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returns_refund_procg_mode) && (mb_strlen($returns_refund_procg_mode) > 1)) {
            throw new \InvalidArgumentException('invalid length for $returns_refund_procg_mode when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['returns_refund_procg_mode'] = $returns_refund_procg_mode;

        return $this;
    }

    /**
     * Gets rets_prod_valn_is_suspended
     *
     * @return string|null
     */
    public function getRetsProdValnIsSuspended()
    {
        return $this->container['rets_prod_valn_is_suspended'];
    }

    /**
     * Sets rets_prod_valn_is_suspended
     *
     * @param string|null $rets_prod_valn_is_suspended rets_prod_valn_is_suspended
     *
     * @return self
     */
    public function setRetsProdValnIsSuspended($rets_prod_valn_is_suspended)
    {
        if (is_null($rets_prod_valn_is_suspended)) {
            array_push($this->openAPINullablesSetToNull, 'rets_prod_valn_is_suspended');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rets_prod_valn_is_suspended', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($rets_prod_valn_is_suspended) && (mb_strlen($rets_prod_valn_is_suspended) > 1)) {
            throw new \InvalidArgumentException('invalid length for $rets_prod_valn_is_suspended when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['rets_prod_valn_is_suspended'] = $rets_prod_valn_is_suspended;

        return $this;
    }

    /**
     * Gets returns_refund_extent
     *
     * @return string|null
     */
    public function getReturnsRefundExtent()
    {
        return $this->container['returns_refund_extent'];
    }

    /**
     * Sets returns_refund_extent
     *
     * @param string|null $returns_refund_extent Returns Refund Code
     *
     * @return self
     */
    public function setReturnsRefundExtent($returns_refund_extent)
    {
        if (is_null($returns_refund_extent)) {
            array_push($this->openAPINullablesSetToNull, 'returns_refund_extent');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returns_refund_extent', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returns_refund_extent) && (mb_strlen($returns_refund_extent) > 3)) {
            throw new \InvalidArgumentException('invalid length for $returns_refund_extent when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['returns_refund_extent'] = $returns_refund_extent;

        return $this;
    }

    /**
     * Gets prelim_refund_is_determined
     *
     * @return string|null
     */
    public function getPrelimRefundIsDetermined()
    {
        return $this->container['prelim_refund_is_determined'];
    }

    /**
     * Sets prelim_refund_is_determined
     *
     * @param string|null $prelim_refund_is_determined prelim_refund_is_determined
     *
     * @return self
     */
    public function setPrelimRefundIsDetermined($prelim_refund_is_determined)
    {
        if (is_null($prelim_refund_is_determined)) {
            array_push($this->openAPINullablesSetToNull, 'prelim_refund_is_determined');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('prelim_refund_is_determined', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($prelim_refund_is_determined) && (mb_strlen($prelim_refund_is_determined) > 1)) {
            throw new \InvalidArgumentException('invalid length for $prelim_refund_is_determined when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['prelim_refund_is_determined'] = $prelim_refund_is_determined;

        return $this;
    }

    /**
     * Gets replacement_material
     *
     * @return string|null
     */
    public function getReplacementMaterial()
    {
        return $this->container['replacement_material'];
    }

    /**
     * Sets replacement_material
     *
     * @param string|null $replacement_material replacement_material
     *
     * @return self
     */
    public function setReplacementMaterial($replacement_material)
    {
        if (is_null($replacement_material)) {
            array_push($this->openAPINullablesSetToNull, 'replacement_material');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replacement_material', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($replacement_material) && (mb_strlen($replacement_material) > 40)) {
            throw new \InvalidArgumentException('invalid length for $replacement_material when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['replacement_material'] = $replacement_material;

        return $this;
    }

    /**
     * Gets replacement_material_quantity
     *
     * @return float|null
     */
    public function getReplacementMaterialQuantity()
    {
        return $this->container['replacement_material_quantity'];
    }

    /**
     * Sets replacement_material_quantity
     *
     * @param float|null $replacement_material_quantity Replacement Material Quantity
     *
     * @return self
     */
    public function setReplacementMaterialQuantity($replacement_material_quantity)
    {
        if (is_null($replacement_material_quantity)) {
            array_push($this->openAPINullablesSetToNull, 'replacement_material_quantity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replacement_material_quantity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }


        $this->container['replacement_material_quantity'] = $replacement_material_quantity;

        return $this;
    }

    /**
     * Gets replacement_material_qty_unit
     *
     * @return string|null
     */
    public function getReplacementMaterialQtyUnit()
    {
        return $this->container['replacement_material_qty_unit'];
    }

    /**
     * Sets replacement_material_qty_unit
     *
     * @param string|null $replacement_material_qty_unit Replacement Material Unit of Measure
     *
     * @return self
     */
    public function setReplacementMaterialQtyUnit($replacement_material_qty_unit)
    {
        if (is_null($replacement_material_qty_unit)) {
            array_push($this->openAPINullablesSetToNull, 'replacement_material_qty_unit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replacement_material_qty_unit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($replacement_material_qty_unit) && (mb_strlen($replacement_material_qty_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $replacement_material_qty_unit when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['replacement_material_qty_unit'] = $replacement_material_qty_unit;

        return $this;
    }

    /**
     * Gets replacement_material_is_requested
     *
     * @return string|null
     */
    public function getReplacementMaterialIsRequested()
    {
        return $this->container['replacement_material_is_requested'];
    }

    /**
     * Sets replacement_material_is_requested
     *
     * @param string|null $replacement_material_is_requested replacement_material_is_requested
     *
     * @return self
     */
    public function setReplacementMaterialIsRequested($replacement_material_is_requested)
    {
        if (is_null($replacement_material_is_requested)) {
            array_push($this->openAPINullablesSetToNull, 'replacement_material_is_requested');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replacement_material_is_requested', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($replacement_material_is_requested) && (mb_strlen($replacement_material_is_requested) > 1)) {
            throw new \InvalidArgumentException('invalid length for $replacement_material_is_requested when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['replacement_material_is_requested'] = $replacement_material_is_requested;

        return $this;
    }

    /**
     * Gets replacement_matl_supplying_plant
     *
     * @return string|null
     */
    public function getReplacementMatlSupplyingPlant()
    {
        return $this->container['replacement_matl_supplying_plant'];
    }

    /**
     * Sets replacement_matl_supplying_plant
     *
     * @param string|null $replacement_matl_supplying_plant Supplying Plant for Replacement Material
     *
     * @return self
     */
    public function setReplacementMatlSupplyingPlant($replacement_matl_supplying_plant)
    {
        if (is_null($replacement_matl_supplying_plant)) {
            array_push($this->openAPINullablesSetToNull, 'replacement_matl_supplying_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('replacement_matl_supplying_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($replacement_matl_supplying_plant) && (mb_strlen($replacement_matl_supplying_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $replacement_matl_supplying_plant when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['replacement_matl_supplying_plant'] = $replacement_matl_supplying_plant;

        return $this;
    }

    /**
     * Gets next_plant_for_follow_up_activity
     *
     * @return string|null
     */
    public function getNextPlantForFollowUpActivity()
    {
        return $this->container['next_plant_for_follow_up_activity'];
    }

    /**
     * Sets next_plant_for_follow_up_activity
     *
     * @param string|null $next_plant_for_follow_up_activity next_plant_for_follow_up_activity
     *
     * @return self
     */
    public function setNextPlantForFollowUpActivity($next_plant_for_follow_up_activity)
    {
        if (is_null($next_plant_for_follow_up_activity)) {
            array_push($this->openAPINullablesSetToNull, 'next_plant_for_follow_up_activity');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_plant_for_follow_up_activity', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($next_plant_for_follow_up_activity) && (mb_strlen($next_plant_for_follow_up_activity) > 4)) {
            throw new \InvalidArgumentException('invalid length for $next_plant_for_follow_up_activity when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['next_plant_for_follow_up_activity'] = $next_plant_for_follow_up_activity;

        return $this;
    }

    /**
     * Gets returns_transshipment_plant
     *
     * @return string|null
     */
    public function getReturnsTransshipmentPlant()
    {
        return $this->container['returns_transshipment_plant'];
    }

    /**
     * Sets returns_transshipment_plant
     *
     * @param string|null $returns_transshipment_plant returns_transshipment_plant
     *
     * @return self
     */
    public function setReturnsTransshipmentPlant($returns_transshipment_plant)
    {
        if (is_null($returns_transshipment_plant)) {
            array_push($this->openAPINullablesSetToNull, 'returns_transshipment_plant');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('returns_transshipment_plant', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($returns_transshipment_plant) && (mb_strlen($returns_transshipment_plant) > 1)) {
            throw new \InvalidArgumentException('invalid length for $returns_transshipment_plant when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['returns_transshipment_plant'] = $returns_transshipment_plant;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string|null
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string|null $supplier Account Number of Supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            array_push($this->openAPINullablesSetToNull, 'supplier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier) && (mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets supplier_ret_matl_authzn
     *
     * @return string|null
     */
    public function getSupplierRetMatlAuthzn()
    {
        return $this->container['supplier_ret_matl_authzn'];
    }

    /**
     * Sets supplier_ret_matl_authzn
     *
     * @param string|null $supplier_ret_matl_authzn supplier_ret_matl_authzn
     *
     * @return self
     */
    public function setSupplierRetMatlAuthzn($supplier_ret_matl_authzn)
    {
        if (is_null($supplier_ret_matl_authzn)) {
            array_push($this->openAPINullablesSetToNull, 'supplier_ret_matl_authzn');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('supplier_ret_matl_authzn', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($supplier_ret_matl_authzn) && (mb_strlen($supplier_ret_matl_authzn) > 20)) {
            throw new \InvalidArgumentException('invalid length for $supplier_ret_matl_authzn when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 20.');
        }

        $this->container['supplier_ret_matl_authzn'] = $supplier_ret_matl_authzn;

        return $this;
    }

    /**
     * Gets customer_ret_matl_insp_result_code
     *
     * @return string|null
     */
    public function getCustomerRetMatlInspResultCode()
    {
        return $this->container['customer_ret_matl_insp_result_code'];
    }

    /**
     * Sets customer_ret_matl_insp_result_code
     *
     * @param string|null $customer_ret_matl_insp_result_code Customer Inspection Code
     *
     * @return self
     */
    public function setCustomerRetMatlInspResultCode($customer_ret_matl_insp_result_code)
    {
        if (is_null($customer_ret_matl_insp_result_code)) {
            array_push($this->openAPINullablesSetToNull, 'customer_ret_matl_insp_result_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_ret_matl_insp_result_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($customer_ret_matl_insp_result_code) && (mb_strlen($customer_ret_matl_insp_result_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $customer_ret_matl_insp_result_code when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['customer_ret_matl_insp_result_code'] = $customer_ret_matl_insp_result_code;

        return $this;
    }

    /**
     * Gets next_fllw_up_activity_for_matl_insp
     *
     * @return string|null
     */
    public function getNextFllwUpActivityForMatlInsp()
    {
        return $this->container['next_fllw_up_activity_for_matl_insp'];
    }

    /**
     * Sets next_fllw_up_activity_for_matl_insp
     *
     * @param string|null $next_fllw_up_activity_for_matl_insp Default for Next Follow-Up Activity in Material Inspection
     *
     * @return self
     */
    public function setNextFllwUpActivityForMatlInsp($next_fllw_up_activity_for_matl_insp)
    {
        if (is_null($next_fllw_up_activity_for_matl_insp)) {
            array_push($this->openAPINullablesSetToNull, 'next_fllw_up_activity_for_matl_insp');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('next_fllw_up_activity_for_matl_insp', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($next_fllw_up_activity_for_matl_insp) && (mb_strlen($next_fllw_up_activity_for_matl_insp) > 4)) {
            throw new \InvalidArgumentException('invalid length for $next_fllw_up_activity_for_matl_insp when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['next_fllw_up_activity_for_matl_insp'] = $next_fllw_up_activity_for_matl_insp;

        return $this;
    }

    /**
     * Gets ret_matl_insp_result_code
     *
     * @return string|null
     */
    public function getRetMatlInspResultCode()
    {
        return $this->container['ret_matl_insp_result_code'];
    }

    /**
     * Sets ret_matl_insp_result_code
     *
     * @param string|null $ret_matl_insp_result_code ret_matl_insp_result_code
     *
     * @return self
     */
    public function setRetMatlInspResultCode($ret_matl_insp_result_code)
    {
        if (is_null($ret_matl_insp_result_code)) {
            array_push($this->openAPINullablesSetToNull, 'ret_matl_insp_result_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ret_matl_insp_result_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ret_matl_insp_result_code) && (mb_strlen($ret_matl_insp_result_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $ret_matl_insp_result_code when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['ret_matl_insp_result_code'] = $ret_matl_insp_result_code;

        return $this;
    }

    /**
     * Gets product_is_inspected_at_cust_site
     *
     * @return string|null
     */
    public function getProductIsInspectedAtCustSite()
    {
        return $this->container['product_is_inspected_at_cust_site'];
    }

    /**
     * Sets product_is_inspected_at_cust_site
     *
     * @param string|null $product_is_inspected_at_cust_site product_is_inspected_at_cust_site
     *
     * @return self
     */
    public function setProductIsInspectedAtCustSite($product_is_inspected_at_cust_site)
    {
        if (is_null($product_is_inspected_at_cust_site)) {
            array_push($this->openAPINullablesSetToNull, 'product_is_inspected_at_cust_site');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_is_inspected_at_cust_site', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_is_inspected_at_cust_site) && (mb_strlen($product_is_inspected_at_cust_site) > 1)) {
            throw new \InvalidArgumentException('invalid length for $product_is_inspected_at_cust_site when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['product_is_inspected_at_cust_site'] = $product_is_inspected_at_cust_site;

        return $this;
    }

    /**
     * Gets reference_sd_document
     *
     * @return string|null
     */
    public function getReferenceSdDocument()
    {
        return $this->container['reference_sd_document'];
    }

    /**
     * Sets reference_sd_document
     *
     * @param string|null $reference_sd_document Document Number of Reference Document
     *
     * @return self
     */
    public function setReferenceSdDocument($reference_sd_document)
    {
        if (is_null($reference_sd_document)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document) && (mb_strlen($reference_sd_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['reference_sd_document'] = $reference_sd_document;

        return $this;
    }

    /**
     * Gets reference_sd_document_item
     *
     * @return string|null
     */
    public function getReferenceSdDocumentItem()
    {
        return $this->container['reference_sd_document_item'];
    }

    /**
     * Sets reference_sd_document_item
     *
     * @param string|null $reference_sd_document_item Item Number of the Reference Item
     *
     * @return self
     */
    public function setReferenceSdDocumentItem($reference_sd_document_item)
    {
        if (is_null($reference_sd_document_item)) {
            array_push($this->openAPINullablesSetToNull, 'reference_sd_document_item');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_sd_document_item', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($reference_sd_document_item) && (mb_strlen($reference_sd_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_sd_document_item when calling APICUSTOMERRETURNSRVACustomerReturnItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['reference_sd_document_item'] = $reference_sd_document_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


